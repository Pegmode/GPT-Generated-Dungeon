generate a fantasy dungeon with 5-10 interconnected rooms. There should be multiple monsters to fight in the dungeon. The dungeon should contain multiple items. There should be a powerful final dungeon boss. The dungeon should contain a puzzle with a valid solution. items should have a mass and value field. weapons should have a damage field. Output a json representation in the following format:

#room
{
roomId: roomId,
roomName: name of room,
roomDescription: room description,
connectedRooms: list of connected room IDs,
items: list of ids of items found in room,
monsters: list of monsters in room
}

#item
{
itemId: itemId,
itemName: name of item,
itemDescription: description of item,
mass: mass of item,
value: value of item
}

#monster
{
monsterId: monster id,
monsterName: name of monster,
monsterDescription: description of monster,
inventory: item ids of items held by monster
}

#weapon
{
weaponId: weapon id,
weaponName: name of weapon,
weaponDescription: description of weapon,
damage: damage of weapon
}

#finalBoss
{
finalBossId: final boss id,
finalBossName: name of final boss,
finalBossDescription: description of final boss,
inventory: item ids of items held by final boss
}

#puzzle
{
puzzleId: puzzle id,
puzzleName: name of puzzle,
puzzleDescription: description of puzzle,
solution: solution to puzzle
}

{
  "rooms": [
    {
      "roomId": "0", 
      "roomName": "Entrance Hall", 
      "roomDescription": "A long, dark hallway filled with cobwebs and dust. There is a door to the north and a door to the east.", 
      "connectedRooms": ["1","2"], 
      "items": ["0","1","2"], 
      "monsters": ["0"]
    }, 
    {
      "roomId": "1", 
      "roomName": "Sacrificial Chamber", 
      "roomDescription": "A dark chamber with a large altar in the middle. The walls are lined with ancient murals depicting a dark ritual. There is a door to the south and a door to the west.", 
      "connectedRooms": ["0","3"], 
      "items": ["3","4"], 
      "monsters": ["1"]
    }, 
    {
      "roomId": "2", 
      "roomName": "Hall of Mirrors", 
      "roomDescription": "A long hallway filled with mirrors. Each mirror reflects a distorted version of the room. There is a door to the north and a door to the west.", 
      "connectedRooms": ["0","4"], 
      "items": ["5","6"], 
      "monsters": ["2"]
    }, 
    {
      "roomId": "3", 
      "roomName": "Treasure Room", 
      "roomDescription": "A large room filled with treasure. There is a door to the north and a door to the east.", 
      "connectedRooms": ["1","5"], 
      "items": ["7","8"], 
      "monsters": ["3"]
    }, 
    {
      "roomId": "4", 
      "roomName": "Hall of Statues", 
      "roomDescription": "A long hallway filled with statues of forgotten gods. There is a door to the south and a door to the east.", 
      "connectedRooms": ["2","5"], 
      "items": ["9"], 
      "monsters": ["4"]
    }, 
    {
      "roomId": "5", 
      "roomName": "Boss Room", 
      "roomDescription": "A large, imposing room with a single figure in the center. There is a door to the south and a door to the west.", 
      "connectedRooms": ["3","4"], 
      "items": [], 
      "monsters": ["5"]
    }
  ],
  "items": [
    {
      "itemId": "0", 
      "itemName": "Potion of Health", 
      "itemDescription": "A small vial of glowing liquid. Drinking it restores health.", 
      "mass": 0.5, 
      "value": 10
    }, 
    {
      "itemId": "1", 
      "itemName": "Potion of Strength", 
      "itemDescription": "A small vial of glowing liquid. Drinking it increases strength.", 
      "mass": 0.5, 
      "value": 10
    }, 
    {
      "itemId": "2", 
      "itemName": "Potion of Agility", 
      "itemDescription": "A small vial of glowing liquid. Drinking it increases agility.", 
      "mass": 0.5, 
      "value": 10
    }, 
    {
      "itemId": "3", 
      "itemName": "Gold Coin", 
      "itemDescription": "A small gold coin. It is worth a lot of money.", 
      "mass": 0.1, 
      "value": 500
    }, 
    {
      "itemId": "4", 
      "itemName": "Silver Coin", 
      "itemDescription": "A small silver coin. It is worth a bit of money.", 
      "mass": 0.1, 
      "value": 100
    }, 
    {
      "itemId": "5", 
      "itemName": "Key", 
      "itemDescription": "A small, rusty key. It looks like it can open something.", 
      "mass": 0.1, 
      "value": 0
    }, 
    {
      "itemId": "6", 
      "itemName": "Scroll", 
      "itemDescription": "An ancient scroll filled with ancient writing.", 
      "mass": 0.5, 
      "value": 0
    }, 
    {
      "itemId": "7", 
      "itemName": "Ruby", 
      "itemDescription": "A large red gem. It is worth a lot of money.", 
      "mass": 0.2, 
      "value": 1000
    }, 
    {
      "itemId": "8", 
      "itemName": "Emerald", 
      "itemDescription": "A large green gem. It is worth a lot of money.", 
      "mass": 0.2, 
      "value": 1000
    }, 
    {
      "itemId": "9", 
      "itemName": "Mysterious Crystal", 
      "itemDescription": "A strange crystal. It is glowing with a faint light.", 
      "mass": 0.2, 
      "value": 0
    }
  ],
  "monsters": [
    {
      "monsterId": "0", 
      "monsterName": "Goblin", 
      "monsterDescription": "A small, green creature. It is armed with a rusty knife.", 
      "inventory": ["0","1"]
    }, 
    {
      "monsterId": "1", 
      "monsterName": "Skeleton", 
      "monsterDescription": "A humanoid creature made of bones. It is armed with a rusty sword.", 
      "inventory": ["2","3"]
    }, 
    {
      "monsterId": "2", 
      "monsterName": "Zombie", 
      "monsterDescription": "A rotting corpse. It is armed with a wooden club.", 
      "inventory": ["4"]
    }, 
    {
      "monsterId": "3", 
      "monsterName": "Giant Spider", 
      "monsterDescription": "A large spider. Its legs are covered in poisonous barbs.", 
      "inventory": ["5","6"]
    }, 
    {
      "monsterId": "4", 
      "monsterName": "Ogre", 
      "monsterDescription": "A large, brutish creature. It is armed with a large club.", 
      "inventory": ["7","8"]
    }, 
    {
      "monsterId": "5", 
      "monsterName": "Final Boss", 
      "monsterDescription": "A powerful creature. It is armed with a powerful weapon.", 
      "inventory": ["9"]
    }
  ],
  "weapons": [
    {
      "weaponId": "0", 
      "weaponName": "Rusty Knife", 
      "weaponDescription": "A small, rusty knife.", 
      "damage": 2
    }, 
    {
      "weaponId": "1", 
      "weaponName": "Rusty Sword", 
      "weaponDescription": "A rusty sword.", 
      "damage": 4
    }, 
    {
      "weaponId": "2", 
      "weaponName": "Wooden Club", 
      "weaponDescription": "A crudely made wooden club.", 
      "damage": 3
    }, 
    {
      "weaponId": "3", 
      "weaponName": "Large Club", 
      "weaponDescription": "A large, heavy club.", 
      "damage": 6
    }, 
    {
      "weaponId": "4", 
      "weaponName": "Final Boss Weapon", 
      "weaponDescription": "A powerful weapon wielded by the final boss.", 
      "damage": 10
    }
  ],
  "finalBoss": {
    "finalBossId": "0", 
    "finalBossName": "Dark Lord", 
    "finalBossDescription": "A powerful creature. It wields a powerful weapon.", 
    "inventory": ["4"]
  },
  "puzzle": {
    "puzzleId": "0", 
    "puzzleName": "Riddle of the Key", 
    "puzzleDescription": "To open the door to the final boss, you must answer this riddle: 'What can be broken but never held?'.", 
    "solution": "A promise"
  }
}

generate a text based python game that takes the above json as inputs and runs the game. the player must be able to move between rooms, attack monsters and pick up items. The game is over when the final boss is defeated. The player starts with a weapon.

import json

#load map data from json
map_data = json.loads(open("map.json").read())

#player data
player = {
    'hp': 100,
    'name': 'Player',
    'location': '0',
    'weapon': '0'
}

#function to print the current room
def print_room(room):
    print(room['roomName'])
    print(room['roomDescription'])
    print('Connected Rooms: ' + ', '.join(room['connectedRooms']))
    print('Monsters: ' + ', '.join(room['monsters']))
    print('Items: ' + ', '.join(room['items']))

#function to move to a new room
def move_to_room(room_id):
    global player
    if room_id in map_data['rooms'][player['location']]['connectedRooms']:
        player['location'] = room_id
        print('You have moved to ' + room_id)
    else:
        print('You cannot move to that room.')

#function to attack a monster
def attack_monster(monster_id):
    global player
    if monster_id in map_data['rooms'][player['location']]['monsters']:
        #monster is in the room
        monster = map_data['monsters'][monster_id]
        weapon = map_data['weapons'][player['weapon']]
        print('You attack the ' + monster['monsterName'] + ' with your ' + weapon['weaponName'])
        print('You deal ' + str(weapon['damage']) + ' damage!')
        #remove monster from room
        map_data['rooms'][player['location']]['monsters'].remove(monster_id)
        #add items from monster to room
        map_data['rooms'][player['location']]['items'] += monster['inventory']
        print('You have defeated the ' + monster['monsterName'])
    else:
        print('There is no monster here to attack.')

#function to pick up an item
def pick_up_item(item_id):
    global player
    if item_id in map_data['rooms'][player['location']]['items']:
        #item is in the room
        item = map_data['items'][item_id]
        print('You pick up the ' + item['itemName'])
        #remove item from room
        map_data['rooms'][player['location']]['items'].remove(item_id)
        #add item to player inventory
        player['inventory'].append(item_id)
    else:
        print('There is no item here to pick up.')

#function to check for a puzzle
def check_for_puzzle():
    global player
    if player['location'] == '5':
        #player is in the boss room
        puzzle = map_data['puzzle']
        print(puzzle['puzzleDescription'])
        answer = input('What is the answer? ')
        if answer == puzzle['solution']:
            print('You have solved the puzzle!')
            #remove final boss from room
            map_data['rooms'][player['location']]['monsters'].remove('5')
            #add items from final boss to room
            map_data['rooms'][player['location']]['items'] += map_data['finalBoss']['inventory']
            print('You have defeated the final boss!')
        else:
            print('Incorrect answer!')
    else:
        print('There is no puzzle here.')

#main game loop
while True:
    #print current room
    print_room(map_data['rooms'][player['location']])
    #get user input
    command = input('What do you want to do? ')
    #parse command
    if command == 'move':
        room_id = input('Where do you want to move? ')
        move_to_room(room_id)
    elif command == 'attack':
        monster_id = input('Which monster do you want to attack? ')
        attack_monster(monster_id)
    elif command == 'pick up':
        item_id = input('Which item do you want to pick up? ')
        pick_up_item(item_id)
    elif command == 'puzzle':
        check_for_puzzle()
    elif command == 'quit':
        break
    else:
        print('Invalid command!')